// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qatu.Infrastructure.Persistence;

#nullable disable

namespace Qatu.Infrastructure.Migrations
{
    [DbContext(typeof(QatuDbContext))]
    [Migration("20250601231508_InitialCreateV5")]
    partial class InitialCreateV5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(526),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(540),
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(542),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(543),
                            Name = "Home Decor"
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            BuyerId = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1832),
                            ProductId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            SellerId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869")
                        },
                        new
                        {
                            Id = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            BuyerId = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1834),
                            ProductId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            SellerId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e17da1a-e58c-472b-9de9-0949a9021b36"),
                            ChatId = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            Content = "Hi, is the smartphone still in stock?",
                            SenderId = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74"),
                            SentAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1877)
                        },
                        new
                        {
                            Id = new Guid("7f48d1b2-99fe-4542-966f-c7b1a2ed4d22"),
                            ChatId = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            Content = "Yes, we have 50 units available!",
                            SenderId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869"),
                            SentAt = new DateTime(2025, 6, 1, 23, 20, 8, 160, DateTimeKind.Utc).AddTicks(1879)
                        },
                        new
                        {
                            Id = new Guid("55b744a4-8f58-4e6e-9525-138c045f7fb6"),
                            ChatId = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            Content = "Can you tell me more about the laptop?",
                            SenderId = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74"),
                            SentAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1883)
                        },
                        new
                        {
                            Id = new Guid("5fe703a1-2d97-4677-a8c5-a8ccc320dc41"),
                            ChatId = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            Content = "It has 16GB RAM and a 1TB SSD.",
                            SenderId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869"),
                            SentAt = new DateTime(2025, 6, 1, 23, 20, 8, 160, DateTimeKind.Utc).AddTicks(1885)
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("char(36)")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1740),
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            Rating = 4.5m,
                            Stock = 50,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1744),
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Price = 1299.99m,
                            Rating = 4.8m,
                            Stock = 20,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("930a26f1-9900-40e0-a4a5-acf294d8d91b"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1752),
                            Description = "Lightweight and portable",
                            Name = "Tablet",
                            Price = 499.99m,
                            Rating = 4.3m,
                            Stock = 30,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("b073c12b-c068-433d-8add-36c8040020d9"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1755),
                            Description = "Fitness tracker",
                            Name = "Smartwatch",
                            Price = 199.99m,
                            Rating = 4.1m,
                            Stock = 40,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("30a8c927-9774-4057-9f6a-2c4158d2b2d3"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1762),
                            Description = "Noise-canceling headphones",
                            Name = "Headphones",
                            Price = 149.99m,
                            Rating = 4.4m,
                            Stock = 25,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("377f3896-ed4d-4e68-ad30-02cc65e426b8"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1765),
                            Description = "Blue denim jeans",
                            Name = "Jeans",
                            Price = 49.99m,
                            Rating = 4.2m,
                            Stock = 100,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("45726569-0a33-4ed1-9ce3-072324033594"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1770),
                            Description = "100% Cotton T-shirt",
                            Name = "T-Shirt",
                            Price = 19.99m,
                            Rating = 4.0m,
                            Stock = 150,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("73e0fe7b-530b-4cc1-9ad0-a028f116b0a8"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1773),
                            Description = "Waterproof winter jacket",
                            Name = "Jacket",
                            Price = 99.99m,
                            Rating = 4.3m,
                            Stock = 60,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("7a44753c-aa8c-480f-ade8-bcf20ab8a6ce"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1779),
                            Description = "Comfortable sneakers",
                            Name = "Sneakers",
                            Price = 59.99m,
                            Rating = 4.2m,
                            Stock = 120,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("81461fab-579e-4b88-8406-8c66890f59a3"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1782),
                            Description = "Modern 3-seater sofa",
                            Name = "Sofa",
                            Price = 899.99m,
                            Rating = 4.6m,
                            Stock = 10,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("8db4cc91-52c7-4ab4-8886-653db2e07bc6"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1785),
                            Description = "Solid wood dining table",
                            Name = "Dining Table",
                            Price = 499.99m,
                            Rating = 4.5m,
                            Stock = 15,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("6cdd6f5b-3201-48dc-8a6d-fb7c0dfaa891"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1790),
                            Description = "Queen size bed frame",
                            Name = "Bed Frame",
                            Price = 299.99m,
                            Rating = 4.7m,
                            Stock = 5,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("9b322bca-1f4e-4660-9ef3-96e727453ad2"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1793),
                            Description = "LED floor lamp",
                            Name = "Lamp",
                            Price = 49.99m,
                            Rating = 4.2m,
                            Stock = 30,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("0e371e9c-8e32-4973-befd-8056be6be8fe"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1798),
                            Description = "Soft area rug",
                            Name = "Carpet",
                            Price = 99.99m,
                            Rating = 4.3m,
                            Stock = 20,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1702),
                            Description = "Admin verification request",
                            Status = 0,
                            StoreDescription = "Store managed by admin",
                            StoreName = "Admin Store",
                            UserId = new Guid("44147d07-ae1c-45ae-af1c-984ff4d49eba")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1706),
                            Description = "Request to update store info",
                            Status = 0,
                            StoreDescription = "Electronics and gadgets",
                            StoreName = "SuperElectro",
                            UserId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1708),
                            Description = "Support needed for order issue",
                            Status = 0,
                            StoreDescription = "Store created for buyer support request",
                            StoreName = "Temporary Buyer Store",
                            UserId = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2e3f4a5-b6c7-8901-bcde-f23456789012"),
                            BuyerId = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74"),
                            ChatId = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1855),
                            ProductId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            SellerId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("f4a5b6c7-d8e9-0123-def0-456789012345"),
                            BuyerId = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74"),
                            ChatId = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(1856),
                            ProductId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            SellerId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(493),
                            Description = "Electronics and gadgets",
                            Name = "Tech Store",
                            UserId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(497),
                            Description = "Clothing and accessories",
                            Name = "Fashion Store",
                            UserId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(499),
                            Description = "Home essentials and furniture",
                            Name = "Home Store",
                            UserId = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44147d07-ae1c-45ae-af1c-984ff4d49eba"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(301),
                            Email = "admin@qatu.com",
                            Name = "Admin User",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("a89bff1d-2db6-4e9e-8fd2-bf3ee3ed8869"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(305),
                            Email = "seller@qatu.com",
                            Name = "Seller User",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("87b84069-9bda-4b44-8d0d-d52c3a8bbc74"),
                            CreatedAt = new DateTime(2025, 6, 1, 23, 15, 8, 160, DateTimeKind.Utc).AddTicks(307),
                            Email = "buyer@qatu.com",
                            Name = "Buyer User",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Chat", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Message", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Product", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Request", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("Qatu.Domain.Entities.Request", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Chat", "Chat")
                        .WithOne("Sale")
                        .HasForeignKey("Qatu.Domain.Entities.Sale", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Chat");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "User")
                        .WithMany("Stores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.User", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
