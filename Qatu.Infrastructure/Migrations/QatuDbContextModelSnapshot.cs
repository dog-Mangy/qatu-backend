// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qatu.Infrastructure.Persistence;

#nullable disable

namespace Qatu.Infrastructure.Migrations
{
    [DbContext(typeof(QatuDbContext))]
    partial class QatuDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(61),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(64),
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(68),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(70),
                            Name = "Home Decor"
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Chats", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            BuyerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(184),
                            ProductId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            SellerId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            BuyerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(185),
                            ProductId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            SellerId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01f6e731-a481-437f-b991-4e788c135e54"),
                            ChatId = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            Content = "Hi, is the smartphone still in stock?",
                            SenderId = new Guid("33333333-3333-3333-3333-333333333333"),
                            SentAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(230)
                        },
                        new
                        {
                            Id = new Guid("61918f31-b86f-4b1a-b549-295becaec945"),
                            ChatId = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            Content = "Yes, we have 50 units available!",
                            SenderId = new Guid("22222222-2222-2222-2222-222222222222"),
                            SentAt = new DateTime(2025, 6, 1, 20, 48, 53, 205, DateTimeKind.Utc).AddTicks(231)
                        },
                        new
                        {
                            Id = new Guid("d54de783-d7f2-48b7-89a8-e8afc0c1ac3a"),
                            ChatId = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            Content = "Can you tell me more about the laptop?",
                            SenderId = new Guid("33333333-3333-3333-3333-333333333333"),
                            SentAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(236)
                        },
                        new
                        {
                            Id = new Guid("3869391c-2c4e-43cd-b7b9-e3498dae4bb4"),
                            ChatId = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            Content = "It has 16GB RAM and a 1TB SSD.",
                            SenderId = new Guid("22222222-2222-2222-2222-222222222222"),
                            SentAt = new DateTime(2025, 6, 1, 20, 48, 53, 205, DateTimeKind.Utc).AddTicks(237)
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("char(36)")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(102),
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            Rating = 4.5m,
                            Stock = 50,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(107),
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Price = 1299.99m,
                            Rating = 4.8m,
                            Stock = 20,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("b9574236-ec94-4940-b72e-e7cb6eb296a7"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(110),
                            Description = "Lightweight and portable",
                            Name = "Tablet",
                            Price = 499.99m,
                            Rating = 4.3m,
                            Stock = 30,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("d6015d18-b56f-4a09-b11a-616c19976dbd"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(113),
                            Description = "Fitness tracker",
                            Name = "Smartwatch",
                            Price = 199.99m,
                            Rating = 4.1m,
                            Stock = 40,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("331fc53a-5998-48f3-b43d-a024a9802f01"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(118),
                            Description = "Noise-canceling headphones",
                            Name = "Headphones",
                            Price = 149.99m,
                            Rating = 4.4m,
                            Stock = 25,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("c9f07656-8576-42e1-b9d7-79d790f43fac"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(122),
                            Description = "Blue denim jeans",
                            Name = "Jeans",
                            Price = 49.99m,
                            Rating = 4.2m,
                            Stock = 100,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("e8ebd10b-f12b-454c-9328-ea009b208519"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(125),
                            Description = "100% Cotton T-shirt",
                            Name = "T-Shirt",
                            Price = 19.99m,
                            Rating = 4.0m,
                            Stock = 150,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("97316f14-b558-441a-8488-18d652e67bd4"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(128),
                            Description = "Waterproof winter jacket",
                            Name = "Jacket",
                            Price = 99.99m,
                            Rating = 4.3m,
                            Stock = 60,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("53329735-ec1b-4274-a288-cfe5e92f5c93"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(133),
                            Description = "Comfortable sneakers",
                            Name = "Sneakers",
                            Price = 59.99m,
                            Rating = 4.2m,
                            Stock = 120,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("6a413ddc-ec1a-4fcd-85d8-b49edbaff8db"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(136),
                            Description = "Modern 3-seater sofa",
                            Name = "Sofa",
                            Price = 899.99m,
                            Rating = 4.6m,
                            Stock = 10,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("c09c0e18-50e5-479b-b41d-9e3e854762e3"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(139),
                            Description = "Solid wood dining table",
                            Name = "Dining Table",
                            Price = 499.99m,
                            Rating = 4.5m,
                            Stock = 15,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("80982a3b-9826-4295-ad85-cabe6eed1283"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(145),
                            Description = "Queen size bed frame",
                            Name = "Bed Frame",
                            Price = 299.99m,
                            Rating = 4.7m,
                            Stock = 5,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("c97efecc-dc4b-4cf0-9596-1f0ffa246ca8"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(151),
                            Description = "LED floor lamp",
                            Name = "Lamp",
                            Price = 49.99m,
                            Rating = 4.2m,
                            Stock = 30,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("4bbaa0f3-169d-475f-bd07-528170bf5b62"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(155),
                            Description = "Soft area rug",
                            Name = "Carpet",
                            Price = 99.99m,
                            Rating = 4.3m,
                            Stock = 20,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2e3f4a5-b6c7-8901-bcde-f23456789012"),
                            BuyerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ChatId = new Guid("c1d2e3f4-a5b6-7890-abcd-ef1234567890"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(210),
                            ProductId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            SellerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("f4a5b6c7-d8e9-0123-def0-456789012345"),
                            BuyerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ChatId = new Guid("e3f4a5b6-c7d8-9012-cdef-345678901234"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(211),
                            ProductId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            SellerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(26),
                            Description = "Electronics and gadgets",
                            Name = "Tech Store",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(29),
                            Description = "Clothing and accessories",
                            Name = "Fashion Store",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 205, DateTimeKind.Utc).AddTicks(31),
                            Description = "Home essentials and furniture",
                            Name = "Home Store",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 204, DateTimeKind.Utc).AddTicks(9780),
                            Email = "admin@qatu.com",
                            Name = "Admin User",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 204, DateTimeKind.Utc).AddTicks(9793),
                            Email = "seller@qatu.com",
                            Name = "Seller User",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 6, 1, 20, 43, 53, 204, DateTimeKind.Utc).AddTicks(9795),
                            Email = "buyer@qatu.com",
                            Name = "Buyer User",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Chat", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Message", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Product", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Chat", "Chat")
                        .WithOne("Sale")
                        .HasForeignKey("Qatu.Domain.Entities.Sale", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Chat");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "User")
                        .WithMany("Stores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.User", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
