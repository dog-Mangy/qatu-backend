// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qatu.Infrastructure.Persistence;

#nullable disable

namespace Qatu.Infrastructure.Migrations
{
    [DbContext(typeof(QatuDbContext))]
    [Migration("20250531014427_InitialCreatev4")]
    partial class InitialCreatev4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7785),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7788),
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7790),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7792),
                            Name = "Home Decor"
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("char(36)")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("147e5441-7566-4f91-abea-d321e6faa92a"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(438),
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            Rating = 4.5m,
                            Stock = 50,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("014d9f9a-a0c0-42d2-a0b3-a7ca3a25a824"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(443),
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Price = 1299.99m,
                            Rating = 4.8m,
                            Stock = 20,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("40f1f928-62c5-43c3-a2a7-0e1158330346"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(447),
                            Description = "Lightweight and portable",
                            Name = "Tablet",
                            Price = 499.99m,
                            Rating = 4.3m,
                            Stock = 30,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("2ab29677-42e9-45c6-ad0c-2b8aa2d730c4"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(452),
                            Description = "Fitness tracker",
                            Name = "Smartwatch",
                            Price = 199.99m,
                            Rating = 4.1m,
                            Stock = 40,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("f0b08ca7-017e-4e79-90b5-4c4d0c145d12"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(459),
                            Description = "Noise-canceling headphones",
                            Name = "Headphones",
                            Price = 149.99m,
                            Rating = 4.4m,
                            Stock = 25,
                            StoreId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            Id = new Guid("829c0820-9365-4629-ab39-e627eec0b794"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(463),
                            Description = "Blue denim jeans",
                            Name = "Jeans",
                            Price = 49.99m,
                            Rating = 4.2m,
                            Stock = 100,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("a5776663-ee7e-4e7f-bfa6-58a89732aed8"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(468),
                            Description = "100% Cotton T-shirt",
                            Name = "T-Shirt",
                            Price = 19.99m,
                            Rating = 4.0m,
                            Stock = 150,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("2bdbcfba-13d0-471b-bdfa-2bc260d219d5"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(472),
                            Description = "Waterproof winter jacket",
                            Name = "Jacket",
                            Price = 99.99m,
                            Rating = 4.3m,
                            Stock = 60,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("a03f5b86-abb8-4e33-b4f9-f782601f6fff"),
                            CategoryId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(479),
                            Description = "Comfortable sneakers",
                            Name = "Sneakers",
                            Price = 59.99m,
                            Rating = 4.2m,
                            Stock = 120,
                            StoreId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            Id = new Guid("ce2cfa98-6adb-4e90-9bc8-54c7ad3b3026"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(483),
                            Description = "Modern 3-seater sofa",
                            Name = "Sofa",
                            Price = 899.99m,
                            Rating = 4.6m,
                            Stock = 10,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("cbbb1ecf-cd14-4c20-bce4-b65ec3a67114"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(487),
                            Description = "Solid wood dining table",
                            Name = "Dining Table",
                            Price = 499.99m,
                            Rating = 4.5m,
                            Stock = 15,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("0c76cf62-2d6d-40ae-a829-78d0ef7d1f5b"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(491),
                            Description = "Queen size bed frame",
                            Name = "Bed Frame",
                            Price = 299.99m,
                            Rating = 4.7m,
                            Stock = 5,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("cdadfe30-7cc1-49dc-aae0-83cc85dd432a"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(497),
                            Description = "LED floor lamp",
                            Name = "Lamp",
                            Price = 49.99m,
                            Rating = 4.2m,
                            Stock = 30,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("0f2f4f54-9318-45dd-8550-efb5a0dcc591"),
                            CategoryId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(501),
                            Description = "Soft area rug",
                            Name = "Carpet",
                            Price = 99.99m,
                            Rating = 4.3m,
                            Stock = 20,
                            StoreId = new Guid("66666666-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(379),
                            Description = "Admin verification request",
                            Status = 0,
                            StoreDescription = "Store managed by admin",
                            StoreName = "Admin Store",
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(383),
                            Description = "Request to update store info",
                            Status = 0,
                            StoreDescription = "Electronics and gadgets",
                            StoreName = "SuperElectro",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 307, DateTimeKind.Utc).AddTicks(386),
                            Description = "Support needed for order issue",
                            Status = 0,
                            StoreDescription = "Store created for buyer support request",
                            StoreName = "Temporary Buyer Store",
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7724),
                            Description = "Electronics and gadgets",
                            Name = "Tech Store",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7727),
                            Description = "Clothing and accessories",
                            Name = "Fashion Store",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7754),
                            Description = "Home essentials and furniture",
                            Name = "Home Store",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7530),
                            Email = "admin@qatu.com",
                            Name = "Admin User",
                            Password = "password123",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7537),
                            Email = "seller@qatu.com",
                            Name = "Seller User",
                            Password = "password123",
                            Role = 2
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 5, 31, 1, 44, 27, 306, DateTimeKind.Utc).AddTicks(7539),
                            Email = "buyer@qatu.com",
                            Name = "Buyer User",
                            Password = "password123",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Product", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Qatu.Domain.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Request", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("Qatu.Domain.Entities.Request", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.HasOne("Qatu.Domain.Entities.User", "User")
                        .WithMany("Stores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Qatu.Domain.Entities.User", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
